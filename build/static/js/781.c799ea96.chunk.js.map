{"version":3,"file":"static/js/781.c799ea96.chunk.js","mappings":"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","sources":["../node_modules/emailjs-com/es/store/store.js","../node_modules/emailjs-com/es/utils/validateParams.js","../node_modules/emailjs-com/es/models/EmailJSResponseStatus.js","../node_modules/emailjs-com/es/api/sendPost.js","../node_modules/emailjs-com/es/index.js","../node_modules/emailjs-com/es/methods/send/send.js","components/ContactForm.js","pages/ContactPage.js"],"sourcesContent":["export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (userID, serviceID, templateID) => {\n    if (!userID) {\n        throw 'The user ID is required. Visit https://dashboard.emailjs.com/admin/integration';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} userID - the EmailJS user ID\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = (serviceID, templateID, templatePrams, userID) => {\n    const uID = userID || store._userID;\n    validateParams(uID, serviceID, templateID);\n    const params = {\n        lib_version: '3.2.0',\n        user_id: uID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templatePrams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","import React, { useState } from \"react\";\r\nimport emailjs from \"emailjs-com\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction ContactForm() {\r\n  const [formData, setFormData] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    message: \"\",\r\n  });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [successMessage, setSuccessMessage] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [formErrors, setFormErrors] = useState({});\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevState) => ({\r\n      ...prevState,\r\n      [name]: value,\r\n    }));\r\n    setFormErrors((prevErrors) => ({\r\n      ...prevErrors,\r\n      [name]: \"\",\r\n    }));\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const errors = {};\r\n    if (!formData.name) {\r\n      errors.name = \"Name is required!\";\r\n    }\r\n    if (!formData.email) {\r\n      errors.email = \"Email is required\";\r\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\r\n      errors.email = \"Email is not valid!\";\r\n    }\r\n    if (!formData.message) {\r\n      errors.message = \"Message is required!\";\r\n    }\r\n    setFormErrors(errors);\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    // Send email via EmailJS\r\n    emailjs\r\n      .send(\r\n        \"service_k21w8uc\",\r\n        \"template_c3bmeq4\",\r\n        formData,\r\n        \"JSzaAs-uePW9OpLkt\"\r\n      )\r\n      .then(\r\n        (response) => {\r\n          setSuccessMessage(\"Your message has been sent successfully!\");\r\n          setErrorMessage(\"\");\r\n          setIsLoading(false);\r\n          setFormData({\r\n            name: \"\",\r\n            email: \"\",\r\n            message: \"\",\r\n          });\r\n        },\r\n        (err) => {\r\n          setErrorMessage(\"Failed to send the message. Please try again.\");\r\n          setSuccessMessage(\"\");\r\n          setIsLoading(false);\r\n        }\r\n      );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {successMessage ? (\r\n        <div className=\"success-message\">\r\n          <h3>{successMessage}</h3>\r\n          <Link to=\"/\">\r\n            <button className=\"back-to-home-btn\">Back to Home Page</button>\r\n          </Link>\r\n        </div>\r\n      ) : errorMessage ? (\r\n        <div className=\"error-message\">\r\n          <h3>{errorMessage}</h3>\r\n          <Link to=\"/\">\r\n            <button className=\"back-to-home-btn\">Back to Home Page</button>\r\n          </Link>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <h2 className=\"contact-form-title\">Contact Me</h2>\r\n          <form className=\"contact-form\" onSubmit={handleSubmit}>\r\n            <div className=\"contact-form-field-group\">\r\n              <label htmlFor=\"name\">Name:</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"name\"\r\n                name=\"name\"\r\n                value={formData.name}\r\n                onChange={handleChange}\r\n                placeholder=\"Your Name\"\r\n              />\r\n              {formErrors.name && (\r\n                <span className=\"error\">{formErrors.name}</span>\r\n              )}\r\n            </div>\r\n            <div className=\"contact-form-field-group\">\r\n              <label htmlFor=\"email\">Email:</label>\r\n              <input\r\n                type=\"email\"\r\n                id=\"email\"\r\n                name=\"email\"\r\n                value={formData.email}\r\n                onChange={handleChange}\r\n                placeholder=\"Your Email\"\r\n              />\r\n              {formErrors.email && (\r\n                <span className=\"error\">{formErrors.email}</span>\r\n              )}\r\n            </div>\r\n            <div className=\"contact-form-field-group\">\r\n              <label htmlFor=\"message\">Message:</label>\r\n              <textarea\r\n                id=\"message\"\r\n                name=\"message\"\r\n                rows=\"5\"\r\n                value={formData.message}\r\n                onChange={handleChange}\r\n                placeholder=\"Your Message\"\r\n              ></textarea>\r\n              {formErrors.message && (\r\n                <span className=\"contact-form-error\">{formErrors.message}</span>\r\n              )}\r\n            </div>\r\n            <div className=\"contact-form-field-group\">\r\n              <button\r\n                className=\"contact-form-submit-btn\"\r\n                type=\"submit\"\r\n                disabled={isLoading}\r\n              >\r\n                {isLoading ? \"Sending...\" : \"Send\"}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport ContactForm from \"../components/ContactForm\";\r\n\r\nfunction ContactMePage() {\r\n  return (\r\n    <>\r\n      <div className=\"contact-form-wrapper\">\r\n        <ContactForm />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ContactMePage;\r\n"],"names":["store","_origin","validateParams","userID","serviceID","templateID","EmailJSResponseStatus","constructor","httpResponse","this","status","text","responseText","sendPost","url","data","headers","arguments","length","undefined","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","_ref","target","responseStatus","_ref2","open","Object","keys","forEach","key","setRequestHeader","send","templatePrams","uID","_userID","params","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","formData","setFormData","useState","name","email","message","isLoading","setIsLoading","successMessage","setSuccessMessage","errorMessage","setErrorMessage","formErrors","setFormErrors","handleChange","e","value","prevState","prevErrors","_jsx","children","_jsxs","className","Link","to","_Fragment","onSubmit","preventDefault","validateForm","errors","test","emailjs","then","response","err","htmlFor","type","id","onChange","placeholder","rows","disabled","ContactForm"],"sourceRoot":""}